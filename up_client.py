from api_set import client
import json
import re

science = [
    "물리학",
    "화학",
    "생명과학",
    "지구과학"
]

science_topics = {
    "물리학": [
        "양자역학 (파동함수, 얽힘, 불확정성 원리 등)",
        "통계물리학 (엔트로피, 상전이, 임계현상 등)",
        "천체물리학 (블랙홀, 중력파, 우주배경복사 등)",
        "고체물리학 (밴드구조, 자성, 초전도 등)",
        "입자물리학 (표준모형, 힉스 보손, 중성미자 진동 등)",
        "핵물리학 (핵융합, 핵붕괴, 중성자별 내부 구조 등)",
        "광학 및 광자학 (양자광학, 비선형광학, 레이저 물리 등)",
        "유체역학 (난류, 점성유체, 나비에–스토크스 방정식 등)",
        "플라즈마물리학 (자기밀폐, 토카막, 태양 플라즈마 등)",
        "응집물질물리학 (위상물질, 그래핀, 보스-아인슈타인 응축 등)",
        "고에너지물리학 (양성자 충돌, 초대칭, 암물질 탐색 등)",
        "계산물리학 (몬테카를로 시뮬레이션, 수치해석, 병렬 계산 등)",
        "비선형동역학 (카오스, 프랙탈, 자기조직화 현상 등)",
        "양자정보물리학 (큐비트, 양자얽힘 통신, 양자컴퓨팅 등)",
        "열역학 (열기관 효율, 카르노 사이클, 엔트로피 생성 등)"
    ],
    "화학": [
        "유기화학 (반응 메커니즘, 고분자, 생체분자 등)",
        "무기화학 (배위화합물, 전이금속 촉매, 결정 구조 등)",
        "물리화학 (양자화학, 분광학, 반응속도론 등)",
        "분석화학 (크로마토그래피, 질량분석, 전기화학 등)",
        "환경화학 (대기 오염 화학, 수질 반응, 지속가능 화학 등)",
        "계산화학 (DFT, 분자동역학, 반응 경로 탐색 등)",
        "재료화학 (반도체, 촉매, 나노입자 등)",
        "전기화학 (전지, 전극반응, 연료전지 등)",
        "생화학 (효소 반응, 대사 경로, 단백질 접힘 등)",
        "광화학 (광촉매, 광합성 모사 반응, 광분해 등)",
        "표면화학 (흡착, 계면반응, 자기조립 단층 등)",
        "나노화학 (나노입자 합성, 양자점, 분자전자소자 등)",
        "고분자화학 (중합반응, 블록공중합체, 스마트폴리머 등)",
        "의약화학 (약물 설계, 수용체 결합, SAR 분석 등)",
        "촉매화학 (균일·이종 촉매, 활성부위, 반응 메커니즘 등)"
    ],
    "생명과학": [
        "분자생물학 (DNA 복제, 전사·번역, CRISPR 등)",
        "세포생물학 (세포 신호전달, 소기관 기능, 세포주기 조절 등)",
        "미생물학 (바이러스·세균 상호작용, 항생제 내성, 미생물 군집 등)",
        "생태학 (종 다양성, 군집 상호작용, 생태계 서비스 등)",
        "신경과학 (시냅스 가소성, 뇌 회로, 인지 기능 기초 등)",
        "유전학 (유전자 발현 조절, 돌연변이, 유전체 분석 등)",
        "생리학 (항상성, 호르몬 신호, 신경전달물질 등)",
        "면역학 (항체 생성, 면역 기억, 자가면역질환 등)",
        "진화생물학 (자연선택, 분자시계, 적응방산 등)",
        "발달생물학 (배아 발생, 줄기세포, 형태형성 등)",
        "종양생물학 (암 유전자, 종양 억제, 신호경로 이상 등)",
        "합성생물학 (유전자 회로 설계, 생체시스템 엔지니어링 등)",
        "시스템생물학 (네트워크 분석, 오믹스 통합, 모델링 등)",
        "생물정보학 (유전체 서열 분석, 단백질 예측, 데이터 마이닝 등)",
        "행동생물학 (사회성 진화, 의사결정, 신경-행동 연계 등)"
    ],
    "지구과학": [
        "기후과학 (온실가스 효과, 대기 순환, 해양-대기 상호작용 등)",
        "지질학 (암석학, 판구조론, 화산·지진 메커니즘 등)",
        "해양학 (해류, 염분 분포, 심해 환경 등)",
        "대기과학 (일기예보, 극한 기상, 에어로졸 등)",
        "행성과학 (태양계 탐사, 화성 지질, 외계 행성 대기 등)",
        "지구물리학 (지진파, 중력장, 자기장, 지각 구조 등)",
        "지화학 (동위원소, 원소 순환, 암석 내 반응 등)",
        "빙하학 (빙상 변화, 고기후 복원, 해수면 상승 등)",
        "수문학 (지하수 흐름, 수자원 순환, 홍수 예측 등)",
        "재해과학 (지진, 태풍, 산사태, 복합재해 모델링 등)",
        "원격탐사학 (위성 관측, 지표 반사도, 기후 모니터링 등)",
        "행성기후학 (금성·화성 기후, 대기 조성, 복사전달 등)",
        "지자기학 (지구 자기장 역전, 다이너모 메커니즘 등)",
        "고지질학 (지질 시대, 대륙 이동, 생물 대멸종 분석 등)",
        "환경지구화학 (오염물 순환, 탄소 저장, 토양 화학 과정 등)"
    ]
}

pattern = r'^\s*([^(\n]+?)\s*\('



def _normalize_quotes(s: str) -> str:
    # 스마트 쿼트 → ASCII 쿼트
    return (
        s.replace("“", '"').replace("”", '"')
        .replace("„", '"').replace("‟", '"')
        .replace("‟", '"').replace("＂", '"')
    )

def _strip_leading_number(s: str) -> str:
    # "1. ..." / "  12. ..." 등 선행 번호 제거
    return re.sub(r'^\s*\d+\.\s*', '', s).strip()

def extract_questions(content: str) -> list[str]:
    # 1) 큰따옴표 블록 추출 우선
    content = _normalize_quotes(content).replace("\r\n", "\n").replace("\r", "\n")
    quoted = re.findall(r'"([^"]+)"', content)

    items = []
    if quoted:
        for q in quoted:
            q = q.strip()
            if not q:
                continue
            q = _strip_leading_number(q)
            if q:
                items.append(q)
        return items

    # 2) 폴백: 번호 패턴으로 분리
    parts = re.split(r'\n?\s*\d+\.\s*', content)
    parts = [p.strip().strip('"') for p in parts if p.strip()]
    parts = [_strip_leading_number(p) for p in parts if p.strip()]
    return [p for p in parts if p]

def save_questions_jsonl_from_response(response, science_field, keyword, output_path: str = "physics_questions.jsonl"):
    # GPT 응답 본문 추출
    content = response.choices[0].message.content
    questions = extract_questions(content)

    if not questions:
        raise ValueError("질문을 한 건도 추출하지 못했습니다. 응답 형식을 확인하세요.")

    with open(output_path, "w", encoding="utf-8") as f:
        for i, q in enumerate(questions, start=1):
            row = {
                "id": i,
                "question": q,
                "subject": f"{science_field}_{keyword}"
            }
            f.write(json.dumps(row, ensure_ascii=False) + "\n")

    print(f"{len(questions)}개 문항을 {output_path}로 저장했습니다.")



for science_field in science:
    for topics in science_topics[science_field]:
        match = re.match(pattern, topics)
        keyword = match.group(1).strip() if match else None


        response = client.chat.completions.create(
            model="solar-pro2",
            messages=[
                {
                    "role": "system",
                    "content": f"""[역할]
                    당신은 다양한 {science_field} 분야를 전공한 대학 교수이다. 당신은 학생의 {science_field}에 대한 이해도를 평가하기 위해 학생 1명당 서로 다른 1개의 문제를 출제해야 한다.
                    당신의 임무는 학생이 단순 지식 재현을 넘어, 과학 개념 설명 가능, 과학 실험 결과 해석, 문제에 대한 복합적 분석과 다단계 추론을 수행할 수 있도록 문제를 출제하는 것이다.
                    
                    [조건]  
                    - 각 학생에게 단 하나의 문제만을 출제해야 한다.
                    - 출제는 순수 {science_field} 분야에서 이루어져야 함.
                    - 문제는 학생이 다음 7개 중 6개 이상을 반드시 고려할 수 있도록 출제해야 함.
                    1. 구체성: 문제가 요구하는 답변 영역은 명확하고 분명해야 함. 
                    2. 도메인 지식: 문제는 해당 과학 분야의 핵심 개념과 이론에 대한 깊은 이해를 필요로 해야 함.
                    3. 복잡성: 문제는 단순한 사실 서술을 넘어, step-by-step 추론이나 다양한 과학 개념을 종합해서 해결해야 하는 사고 과정을 요구해야 함.
                    4. 문제 해결 능력: 문제는 체계적으로 해결책을 도출하는 것처럼 능동적인 문제 해결 능력을 요구해야 함.
                    5. 창의성: 문제는 학생이 창의적으로 사고하고, 새로운 관점에서 접근하도록 유도해야 함.
                    6. 기술적 정확성: 문제는 과학적 용어와 개념이 정확하게 사용되어야 함.
                    7. 실제 적용: 문제는 학생의 이론적 지식을 실제 상황이나 실험적 맥락에 적용하는 능력을 평가할 수 있어야 함.

                    [답변 출력 형식]
                    - 문제는 한국어 큰따옴표("...") 안에 작성되어야 함.
                    - 만약 2개 이상의 문제를 출제하게 될 경우, 각 문제는 번호(1., 2., 3., ...)와 1번의 줄바꿈으로 구분되어야 함.
                    - 문제 외에 다른 설명이나 부가 정보는 절대 포함하지 말 것.
                    
                    [매우 중요한 지시 사항]
                    - 학생들에게 출제된 문제는 반드시 서로 달라야 함.
                    
                    [출력 예시]  
                    - 아래 출력 예시에서 출력 형식은 반드시 지켜야 함.
                    - 예시와 동일한 개념의 문제를 출제하는 것을 금지함.
                    예시: 
                    "1. 심해 열수 분출공 주변에서 발견된 극한미생물이 가지는 효소 활성 변화를 분자 수준에서 설명하고, 실험 데이터를 기반으로 해당 효소가 산업용 생분해 플라스틱 개발에 어떻게 응용될 수 있는지 다단계로 추론하세요."
                    "2. 탄소 고정 미생물의 Calvin cycle 효소 중 RuBisCO의 촉매 효율이 온도 및 CO₂ 농도 변화에 따라 어떻게 조절되는지를 동역학적으로 분석하고, 이 효소 시스템을 모사한 인공 광합성 장치에서 에너지 전환 효율을 극대화하기 위한 설계 방안을 단계적으로 제시하세요."
                    
                    [문제 출제 범위]
                    - 아래 세부 분야는 참고사항일 뿐, 이들 중 특정 분야에 국한되지 않고 {keyword}에 속하는 다양한 분야에서 문제를 출제해야 함.
                    {topics}"""
                },
                {
                    "role": "user",
                    "content": "50명의 학생에게 문제를 출제해라."   # 주제와 비율에 따라 학생 수 조절하세요.
                }
            ],
            max_tokens=4000,
            temperature=1.2,
            reasoning_effort="high",
            top_p=0.95
        )

        save_questions_jsonl_from_response(response, science_field, keyword, output_path=f"{science_field}_{keyword}.jsonl")
